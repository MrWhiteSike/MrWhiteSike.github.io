<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr WhiteSike&#39;s Blog</title>
  
  <subtitle>不鸣则已，一飞冲天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhifeiyuntian.com/"/>
  <updated>2019-03-07T05:15:25.946Z</updated>
  <id>http://zhifeiyuntian.com/</id>
  
  <author>
    <name>Mr WhiteSike</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础 （一）字符串</title>
    <link href="http://zhifeiyuntian.com/2019/03/06/string/"/>
    <id>http://zhifeiyuntian.com/2019/03/06/string/</id>
    <published>2019-03-05T23:54:54.000Z</published>
    <updated>2019-03-07T05:15:25.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1582804188,3885231547&amp;fm=26&amp;gp=0.jpg" alt="书法" title="书法"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>字符串广泛应用在Java编程中，JDK中提供了String类来创建和操作字符串对象。当创建了一个String对象后，所创建的字符串是不能改变的，在需要使用可修改的字符串时，Java提供了两个选择：StringBuffer和StringBuilder。在JDK1.8中又添加了新成员StringJoiner类，在这里也写一下这个类具体用法。</p><a id="more"></a><h1 id="1、String构造函数"><a href="#1、String构造函数" class="headerlink" title="1、String构造函数"></a>1、String构造函数</h1><table><thead><tr><th>序号</th><th>构造函数</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>public String()</td><td>构造空字符String对象</td></tr><tr><td>2</td><td>public String(String original)</td><td>构造一个新的相同的String对象</td></tr><tr><td>3</td><td>public String(char value[])</td><td>通过给定字符数组，构造String对象</td></tr><tr><td>4</td><td>public String(char value[], int offset, int count)</td><td>给定字符数组，通过下标偏移量（offset），截取量（count）截取子数组，构建包含此子数组的String对象</td></tr><tr><td>5</td><td>String(int[] codePoints, int offset, int count)</td><td>给定int数组，通过下标偏移位置（offset），截取量（count）截取子数组，构建包含此子数组的String对象</td></tr><tr><td>6</td><td>public String(byte bytes[])</td><td>使用平台默认的字符集解码指定的byte数组，构造String 对象</td></tr><tr><td>7</td><td>public String(byte bytes[], int offset, int length)</td><td>通过下标偏移位置（offset），截取量（count）截取子数组，构建包含此子数组的String对象</td></tr><tr><td>8</td><td>public String(byte bytes[], String charsetName)</td><td>通过字符集名字（charsetName）确定字符集，然后利用此字符集解码指定的byte数组，构建String对象</td></tr><tr><td>9</td><td>public String(byte bytes[], int offset, int length, String charsetName)</td><td>通过下标偏移位置（offset），截取量（count）截取子数组，通过字符集名字确定字符集，利用此字符集解码指定的byte子数组，构建String对象</td></tr><tr><td>10</td><td>public String(byte bytes[], Charset charset)</td><td>利用字符集charset解码指定的byte数组，构建String对象；jdk1.6新增</td></tr><tr><td>11</td><td>public String(byte bytes[], int offset, int length, Charset charset)</td><td>通过下标偏移位置（offset），截取量（count）截取子数组，然后利用字符集charset解码指定的byte子数组，构建String对象；jdk1.6新增</td></tr><tr><td>12</td><td>public String(StringBuffer buffer)</td><td>通过给定的StringBuffer，构建String对象</td></tr><tr><td>13</td><td>public String(StringBuilder builder)</td><td>通过给定的StringBuffer，构建String对象</td></tr></tbody></table><h1 id="2、常见的String方法函数"><a href="#2、常见的String方法函数" class="headerlink" title="2、常见的String方法函数"></a>2、常见的String方法函数</h1><table><thead><tr><th>序号</th><th>方法函数</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>public int length()</td><td>获取字符串长度</td></tr><tr><td>2</td><td>public boolean isEmpty()</td><td>判断字符串是否为空</td></tr><tr><td>3</td><td>public char charAt(int index))</td><td>获取下标index下的字符</td></tr><tr><td>4</td><td>public byte[] getBytes()</td><td>将字符串转换成字节数组</td></tr><tr><td>5</td><td>public byte[] getBytes(String charsetName)</td><td>通过指定字符集名字将字符串转换成字节数组</td></tr><tr><td>6</td><td>public byte[] getBytes(Charset charset))</td><td>通过指定字符集将字符串转换成字节数组</td></tr><tr><td>7</td><td>public boolean equals(Object anObject)</td><td>判断两个对象中字符是否都相同</td></tr><tr><td>8</td><td>public boolean contentEquals(StringBuffer sb))</td><td>判断字符串对象和StringBuffer中内容是否相同</td></tr><tr><td>9</td><td>public boolean equalsIgnoreCase(String anotherString)</td><td>判断与另一个给定的字符串对象忽略大小写后的内容是否相同</td></tr><tr><td>10</td><td>public int compareTo(String anotherString)</td><td>与另一个字符串对象比较大小</td></tr><tr><td>11</td><td>public int indexOf(String str)</td><td>查找指定子串在字符串中第一次出现的位置下标</td></tr><tr><td>12</td><td>public int indexOf(String str, int fromIndex)</td><td>指定从起始下标位置开始查找指定子串在字符串中第一次出现的位置下标</td></tr><tr><td>13</td><td>public String substring(int beginIndex)</td><td>截取从起始下标位置开始到字符串末尾的子串</td></tr><tr><td>14</td><td>public String substring(int beginIndex, int endIndex)</td><td>截取从起始下标位置开始到（结束下标位置-1）的子串</td></tr><tr><td>15</td><td>public String concat(String str)</td><td>两个字符串拼接</td></tr><tr><td>16</td><td>public String replace(char oldChar, char newChar)</td><td>用newChar替换字符串中出现的oldChar</td></tr><tr><td>17</td><td>public boolean matches(String regex)</td><td>正则表达式匹配，匹配成功返回true，匹配失败返回false</td></tr><tr><td>18</td><td>public String[] split(String regex)</td><td>字符串在regex出现的地方进行分割，转换成字符串数组</td></tr><tr><td>19</td><td>public String[] split(String regex, int limit)</td><td>字符串在regex出现的地方进行分割，limit为分割的次数，分割成字符串数组，长度=limit+1</td></tr><tr><td>20</td><td>public String toLowerCase()</td><td>字符串中大写字母全部变成小写字母</td></tr><tr><td>21</td><td>public String toUpperCase()</td><td>字符串中小写字母全部变成大写字母</td></tr><tr><td>22</td><td>public String trim()</td><td>去除字符串首尾两端的空白字符</td></tr><tr><td>23</td><td>public char[] toCharArray()</td><td>字符串转化成字符数组</td></tr><tr><td>24</td><td>public static String valueOf(Object obj)</td><td>其他对象转化成字符串，静态方法，使用方式：String.valueOf(obj)</td></tr><tr><td>25</td><td>public static String join(CharSequence delimiter, CharSequence… elements)</td><td>字符串拼接，jdk1.8新增</td></tr></tbody></table><h1 id="3、-和-equals-两者之间的区别"><a href="#3、-和-equals-两者之间的区别" class="headerlink" title="3、== 和 equals 两者之间的区别"></a>3、== 和 equals 两者之间的区别</h1><h2 id="3-1、-比较"><a href="#3-1、-比较" class="headerlink" title="3.1、==比较"></a>3.1、==比较</h2><p>对于基本类型和引用类型==的作用效果是不同的：</p><pre><code>* 基本类型：比较的是值是否相同* 引用类型：比较的是引用是否相同</code></pre><h2 id="3-2、equals比较"><a href="#3-2、equals比较" class="headerlink" title="3.2、equals比较"></a>3.2、equals比较</h2><p>equals本质上就是==，只不过String类重写了equals方法，源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">if (this == anObject) &#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">if (anObject instanceof String) &#123;</span><br><span class="line">    String anotherString = (String)anObject;</span><br><span class="line">    int n = value.length;</span><br><span class="line">    if (n == anotherString.value.length) &#123;</span><br><span class="line">char v1[] = value;</span><br><span class="line">char v2[] = anotherString.value;</span><br><span class="line">int i = 0;</span><br><span class="line">while (n-- != 0) &#123;</span><br><span class="line">    if (v1[i] != v2[i])</span><br><span class="line">return false;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从源码中可以看出，当是引用比较的时候改成了值比较。</p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s1 = &quot;hello&quot;;</span><br><span class="line">String s2 = &quot;hello&quot;;</span><br><span class="line">String s3 = new String(&quot;hello&quot;);</span><br><span class="line">System.out.println(s1 == s2);       // true</span><br><span class="line">System.out.println(s1 == s3);       // false</span><br><span class="line">System.out.println(s1.equals(s2));  // true</span><br><span class="line">System.out.println(s1.equals(s3));  // true</span><br></pre></td></tr></table></figure></p><p>字符串对象的创建过程：<br>String类在内存中管理着一个字符串常量池，池中所有相同的字符串常量只占用同一个内存空间。</p><pre><code>* String s1 = &quot;hello&quot;;执行这句代码时，程序会先看常量池中是否有“hello”这个字符串常量，如果没有就创建一个“hello”字符串对象，并且让引用s1指向这个对象；如果有，让引用s1直接指向常量池中已经存在的hello对象。* String s3 = new String(&quot;hello&quot;);而执行这句代码时，重复s1的操作，然后执行new String() ,重新在堆中开辟了一个内存空间，将常量池中的hello对象复制一份到这个内存空间中，让引用s3指向堆中这个刚创建的hello对象。</code></pre><h1 id="4、StringBuffer和StringBuilder的区别"><a href="#4、StringBuffer和StringBuilder的区别" class="headerlink" title="4、StringBuffer和StringBuilder的区别"></a>4、StringBuffer和StringBuilder的区别</h1><h2 id="4-1、相同点"><a href="#4-1、相同点" class="headerlink" title="4.1、相同点"></a>4.1、相同点</h2><pre><code>* 可增长，可改写* 提供了字符串的许多其他功能</code></pre><h2 id="4-2、不同点"><a href="#4-2、不同点" class="headerlink" title="4.2、不同点"></a>4.2、不同点</h2><pre><code>* StringBuffer是线程同步的，意味着它是线程安全的，但是牺牲了对字符串操作的性能* StringBuilder不是同步的，意味着它是线程不安全的，但是具有更快的字符串操作性能</code></pre><h1 id="5、StringJoiner类"><a href="#5、StringJoiner类" class="headerlink" title="5、StringJoiner类"></a>5、StringJoiner类</h1><p>Java开发中，有时候会遇到字符串拼接的操作，你可能会直接想到就是使用 + 这个操作符直接进行拼接，或者使用StringBuilder或者StringBuffer来实现，那么还有一种重要的拼接方式，就是Java8中提供的StringJoiner，还不了解这种拼接方式的童鞋，那我们就来共同学习一下这个字符串拼接类！</p><h2 id="5-1、StringJoiner类的构造函数"><a href="#5-1、StringJoiner类的构造函数" class="headerlink" title="5.1、StringJoiner类的构造函数"></a>5.1、StringJoiner类的构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public StringJoiner(CharSequence delimiter) &#123;</span><br><span class="line">        this(delimiter, &quot;&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public StringJoiner(CharSequence delimiter,</span><br><span class="line">                        CharSequence prefix,</span><br><span class="line">                        CharSequence suffix) &#123;</span><br><span class="line">        Objects.requireNonNull(prefix, &quot;The prefix must not be null&quot;);</span><br><span class="line">        Objects.requireNonNull(delimiter, &quot;The delimiter must not be null&quot;);</span><br><span class="line">        Objects.requireNonNull(suffix, &quot;The suffix must not be null&quot;);</span><br><span class="line">        // make defensive copies of arguments</span><br><span class="line">        this.prefix = prefix.toString();</span><br><span class="line">        this.delimiter = delimiter.toString();</span><br><span class="line">        this.suffix = suffix.toString();</span><br><span class="line">        this.emptyValue = this.prefix + this.suffix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringJoiner类共有上面2个构造函数，从上面可以看出，第一个构造函数就是调用第二个构造函数，那么我们就来分析一下第二个构造函数，其中delimiter这个参数表示字符串进行拼接的时候以delimiter作为分隔符，prefix代表字符串拼接后的前缀，suffix代表字符串拼接后的后缀。</p><p>StringJoiner的用法比较简单</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestJoiner &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">StringJoiner sJoiner = new StringJoiner(&quot;,&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;);</span><br><span class="line">sJoiner.add(&quot;hello&quot;);</span><br><span class="line">sJoiner.add(&quot;world&quot;);</span><br><span class="line">System.out.println(sJoiner.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;hello,world&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2、常用的add方法"><a href="#5-2、常用的add方法" class="headerlink" title="5.2、常用的add方法"></a>5.2、常用的add方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public StringJoiner add(CharSequence newElement) &#123;</span><br><span class="line">        prepareBuilder().append(newElement);</span><br><span class="line">        return this;</span><br><span class="line">&#125;</span><br><span class="line">private StringBuilder prepareBuilder() &#123;</span><br><span class="line">        if (value != null) &#123;</span><br><span class="line">            value.append(delimiter);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            value = new StringBuilder().append(prefix);</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringJoiner其实就是依赖StringBuilder实现的</p><p>看到这，有些童鞋可能会产生一个疑问，不是已经有StringBuilder了，为什么Java8中还要定义一个StringJoiner呢？</p><p>现在有一个需求：如果我们有这样一个List，这个List中呢，有“hello”，“world”，</p><p>想要把它拼接成一个以下形式的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello:world</span><br></pre></td></tr></table></figure><p>方式一：使用StringBuilder实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = new StringBuilder();</span><br><span class="line">if(!list.isEmpty()) &#123;</span><br><span class="line">builder.append(list.get(0));</span><br><span class="line">for (int i = 1; i &lt; list.size(); i++) &#123;</span><br><span class="line">builder.append(&quot;:&quot;).append(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(builder.toString());</span><br></pre></td></tr></table></figure><p>方式二：使用stream()实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().reduce(new StringBuilder(),(sb, s)-&gt;sb.append(s).append(&quot;:&quot;),StringBuilder::append).toString();</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello:world:</span><br></pre></td></tr></table></figure><p>这种方式需要进行二次处理</p><p>方式三：使用操作符+实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String sum_string = &quot;&quot;;</span><br><span class="line">if(!list.isEmpty()) &#123;</span><br><span class="line">sum_string += list.get(0);</span><br><span class="line">for (int i = 1; i &lt; list.size(); i++) &#123;</span><br><span class="line">sum_string +=&quot;:&quot;+list.get(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum_string);</span><br></pre></td></tr></table></figure><p>以上几种方式，要么是代码复杂，要么是性能不高。</p><p>如果使用StringJoiner，一行代码就可以搞定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.joining(&quot;:&quot;));</span><br></pre></td></tr></table></figure><p>其中，Collectors.joining()的源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static Collector&lt;CharSequence, ?, String&gt; joining(CharSequence delimiter) &#123;</span><br><span class="line">        return joining(delimiter, &quot;&quot;, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">public static Collector&lt;CharSequence, ?, String&gt; joining(CharSequence delimiter,</span><br><span class="line">                                                             CharSequence prefix,</span><br><span class="line">                                                             CharSequence suffix) &#123;</span><br><span class="line">        return new CollectorImpl&lt;&gt;(</span><br><span class="line">                () -&gt; new StringJoiner(delimiter, prefix, suffix),</span><br><span class="line">                StringJoiner::add, StringJoiner::merge,</span><br><span class="line">                StringJoiner::toString, CH_NOID);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>joining方法的实现原理就是借助了StringJoiner。</p><p>如果改变需求，在拼接后的字符串添加前缀“{”，和后缀“}”，那么StringJoiner的优势就会很明显了。</p><p>需要注意的一点是：</p><blockquote><p>StringJoiner是通过StringBuilder实现的，也就是说它也是非线程安全的。</p></blockquote><p>日常开发中，需要进行字符串拼接，如何选择？</p><pre><code>* 如果是简单字符串拼接，直接使用+即可* 如果是在for循环中进行字符串拼接，考虑使用StringBuilder或者StringBuffer。* 如果是通过一个集合，例如list，进行拼接考虑使用StringJoiner</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>字符串在Java开发中应用非常广泛，熟练掌握能避免一些不必要的坑！<br>希望能给大家带来一点帮助，如果文章中有哪些错误之处，还请批评指正！<br>我的口号是：我分享，我快乐，越分享，越快乐！</p><p>感谢各位老铁的支持。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1582804188,3885231547&amp;amp;fm=26&amp;amp;gp=0.jpg&quot; alt=&quot;书法&quot; title=&quot;书法&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;字符串广泛应用在Java编程中，JDK中提供了String类来创建和操作字符串对象。当创建了一个String对象后，所创建的字符串是不能改变的，在需要使用可修改的字符串时，Java提供了两个选择：StringBuffer和StringBuilder。在JDK1.8中又添加了新成员StringJoiner类，在这里也写一下这个类具体用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhifeiyuntian.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://zhifeiyuntian.com/tags/Java/"/>
    
      <category term="String" scheme="http://zhifeiyuntian.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>第一次总结</title>
    <link href="http://zhifeiyuntian.com/2019/03/05/interview/"/>
    <id>http://zhifeiyuntian.com/2019/03/05/interview/</id>
    <published>2019-03-05T07:32:33.000Z</published>
    <updated>2019-03-06T00:06:51.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img2.imgtn.bdimg.com/it/u=1542897967,3608414459&amp;fm=26&amp;gp=0.jpg" alt="首次总结" title="首次总结"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>创建了博客好几天了，现在才来更新，看来我这拖延症又犯了啊。。。</p><p><hr><br><a id="more"></a></p><h1 id="进步"><a href="#进步" class="headerlink" title="进步"></a>进步</h1><hr><p>学习了一些新技能：</p><pre><code>*  熟悉了Markdown语法*  利用阿里云解析了GitHub和coding里的Pages服务*  HEXO和主题配置</code></pre><hr><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><hr><h2 id="站点配置文件-config-yml："><a href="#站点配置文件-config-yml：" class="headerlink" title="站点配置文件_config.yml："></a>站点配置文件_config.yml：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  #type: git</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:MrWhiteSike/MrWhiteSike.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:MrWhiteSike/MrWhiteSike.git,master</span><br></pre></td></tr></table></figure><h2 id="主题配置文件-themes-next-config-yml"><a href="#主题配置文件-themes-next-config-yml" class="headerlink" title="主题配置文件/themes/next/_config.yml:"></a>主题配置文件/themes/next/_config.yml:</h2><p>参考了<a href="https://blog.csdn.net/qq_32454537/article/details/79482896" title="这篇博文" target="_blank" rel="noopener">这篇博文</a>，具体配置细节还请自己琢磨</p><hr><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><hr><p>做这个博客呢，愿景有二：</p><pre><code>* 记录生活中的点滴故事* 分享知识，提升技能</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img2.imgtn.bdimg.com/it/u=1542897967,3608414459&amp;amp;fm=26&amp;amp;gp=0.jpg&quot; alt=&quot;首次总结&quot; title=&quot;首次总结&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;hr&gt;

&lt;p&gt;创建了博客好几天了，现在才来更新，看来我这拖延症又犯了啊。。。&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://zhifeiyuntian.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="生活" scheme="http://zhifeiyuntian.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>开篇博客</title>
    <link href="http://zhifeiyuntian.com/2019/03/01/firstpaper/"/>
    <id>http://zhifeiyuntian.com/2019/03/01/firstpaper/</id>
    <published>2019-03-01T00:26:29.000Z</published>
    <updated>2019-03-03T13:18:30.823Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i2.bvimg.com/678996/40fa8640f4e68e3b.jpg" alt="Markdown"></p><center>开通个人博客，写些东西。在成长的路上，留作纪念，岂不乐哉！</center><a id="more"></a><p>大概花了几天时间利用HEXO框架搭建了这个博客，建好之后心情还有点小激动，毕竟经过自己的一番努力，终于实现拥有专属于自己的个人博客网站，这里参考了<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029#t18" title="hexo史上最全搭建教程" target="_blank" rel="noopener">hexo史上最全搭建教程</a>，感谢这篇文章的博主，写的如此清晰，才让我如此快速的搭建起个人博客网站。</p><p>俗话说：万事开头难。但是只要相信，勇于实践，锲而不舍，方能成功。只要开始，我们不可半途而废，越过山丘，我们才能看到山后的另一番景象！</p><p>先写这么多吧，来日方长！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i2.bvimg.com/678996/40fa8640f4e68e3b.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;
&lt;center&gt;开通个人博客，写些东西。在成长的路上，留作纪念，岂不乐哉！&lt;/center&gt;
    
    </summary>
    
      <category term="生活" scheme="http://zhifeiyuntian.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="随笔" scheme="http://zhifeiyuntian.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
